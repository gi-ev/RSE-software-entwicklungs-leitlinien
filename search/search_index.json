{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"A guidelines and policy template for the development of research software at German research institutions","text":""},{"location":"#a-recommendation-by-gi-rse-working-group-and-de-rse","title":"A recommendation by GI, RSE working group and de-RSE","text":"<p>Research Software Engineering (abbreviated: RSE) is the application of software engineering practices to research software, i.e., software created for and primarily used in scientific research projects. RSE is not High-Performance Computing (HPC), Computational Science Engineering (CSE), Artificial Intelligence, or Data Science. It has different goals and a distinct professional profile for Research Software Engineers.</p> <p>Due to the increased relevance and complexity of research software, efficient and high-quality software development for research software also requires a range of organizational, methodological, and legal measures. This results in consequences both for the leadership to provide organizational support and for the individuals involved in software development to adhere to certain methodological guidelines. These guidelines were created based on the distilled knowledge (as of 2024) about software development in general (Software Engineering) and research software in particular (Research Software Engineering). It is planned to regularly update these guidelines and incorporate new insights.</p> <p>The authors propose these guidelines as a template to aid universities, colleges, and research institutions in the adaptation of fundamental policies and recommendations for research projects involving research software.</p> <p>View Guidelines (DOI: 10.18420/2025-gi_de-rse)</p>"},{"location":"#purpose","title":"Purpose","text":"<p>This guidelines template proposes the establishment of specific guidelines within universities, colleges, and research institutions. It aims to provide concrete assistance for defining their own guidelines while allowing for flexibility to accommodate the different cultures in various disciplines and research institutions through explicit variability for refinement.</p> <p>The guidelines template developed by the GI, the RSE working group, and de-RSE should therefore be used to create an independent document that can ideally be declared binding within one's own university, college, or research institution.</p>"},{"location":"#contact","title":"Contact","text":"<p>For comments and suggestions, please contact the coordination team of the 'Software Guidelines' working group of the RSE section,  currently Sebastian Nielebock, Bernhard Rumpe, and Inga Ulusoy, at the email address rse-entwicklungs-leitlinien@gi.de. We would also appreciate feedback on which university, college, or research center the text is being used and in what form.</p>"},{"location":"#institutions-that-have-adopted-the-guidelines","title":"Institutions that have adopted the guidelines","text":""},{"location":"#rse-website-template","title":"RSE-Website template","text":"<p>A template for an institute's RSE website can be found here.</p>"},{"location":"#glossary","title":"Glossary","text":"<p>A glossary (currently only available in German) to the terms used in the policy template can be found here.</p>"},{"location":"glossar/","title":"Glossary","text":""},{"location":"glossar/#abgeleitete-werke","title":"Abgeleitete Werke:","text":"<p>Auch beim Einsatz bzw. der Einbindung von Code, dessen Nutzungsrechte nicht (ausschlie\u00dflich) beim Forschungszentrum J\u00fclich, sondern bei Dritten, z.B. Kooperationspartnern, liegen (Fremdsoftware) m\u00fcssen Rechte durch den Urheber bzw. dessen Arbeitgeber einger\u00e4umt werden. Dabei sind auch zwingend die Lizenzbedingungen der eingesetzten (Open-Source) Software zu beachten, da eine Nichtbeachtung eine Vertragsverletzung darstellt und zu Schadensersatzforderungen f\u00fchren kann. Dies gilt auch, wenn lediglich Programmbestandteile oder Teilsequenzen in eine eigene Software integriert werden. Dann bedarf es einer intensiven Pr\u00fcfung, inwieweit die verschiedenen Lizenzen der zu integrierenden Drittsoftware inkompatible Regelungen enthalten. Das kann dazu f\u00fchren, dass die eigene Software nicht unter der beabsichtigten OpenSource-Lizenz ver\u00f6ffentlicht werden kann. Zudem kann die Open-Source-Lizenz der eingesetzten Software erl\u00f6schen, wenn die Lizenzbedingungen nicht eingehalten werden.</p>"},{"location":"glossar/#abgeleitete-werke-derived-software","title":"Abgeleitete Werke (Derived Software):","text":"<p>Eigene Software nutzt zumeist fremde Softwarekomponenten, -Bibliotheken, -Infrastrukturen und gilt daher als \u201cabgeleitetes Werk\u201d. Die Lizenzbedingungen fremder Software  und insbesondere auch von Open-Source-Software sind zu ber\u00fccksichtigen, da eine Nichtbeachtung eine Vertragsverletzung darstellt und zu Schadensersatzforderungen f\u00fchren kann. Dies gilt auch, wenn lediglich Programmbestandteile oder Teilsequenzen in eine eigene Software integriert werden. Das kann dazu f\u00fchren, dass die eigene Software nicht unter der beabsichtigten OpenSource-Lizenz ver\u00f6ffentlicht werden kann, sondern eine vorgegebene Lizenz zu nehmen ist. Anmerkung: Es besteht jedoch die technische M\u00f6glichkeit, die eigene Software als unabh\u00e4ngiges Delta zu lizenzieren, das allerdings nur funktionsf\u00e4hig ist, wenn die Nutzer eine entsprechende Lizenz der darunterliegenden Software selbst erwerben. </p>"},{"location":"glossar/#agile-softwareentwicklung","title":"Agile Softwareentwicklung:","text":"<p>Agile Softwareentwicklung ist ein Entwicklungsprozess, der einen zeitnahen Einsatz der Software zum Ziel hat. Die Software wird iterativ entwickelt, wobei in jedem Entwicklungsschritt unter R\u00fccksprache mit den Nutzern die kurz- und langfristige Zielsetzung \u00fcberpr\u00fcft und gegebenenfalls angepasst wird. In der agilen Entwicklung besetzen die Mitglieder des Entwicklerteams verschiedene Rollen, wobei in dem speziellen Fall der Entwicklung von Forschungssoftware oft eine Person mehrere Rollen belegt.</p>"},{"location":"glossar/#ai","title":"AI:","text":"<p>Artifical Intelligence (dt. K\u00fcnstliche Intelligenz) steht f\u00fcr intelligentes Handeln durch Maschinen, und bezeichnet ein Teilgebiet der Informatik, welches auf Automatisierung und maschinellem Lernen basiert. </p>"},{"location":"glossar/#algorithmus","title":"Algorithmus:","text":"<p>Ein Algorithmus ist eine eindeutige Beschreibung von Handlungen zur L\u00f6sungen von Problemen bzw. einer Menge von Problemen. Siehe auch hier.</p>"},{"location":"glossar/#alpha-version","title":"Alpha-Version:","text":"<p>Mit Alpha-Version wird die Version einer Software bezeichnet, die durch die eigenen Entwickler bereits getestet ist, und zum Testen durch weitere, den Entwicklern thematisch nahestehenden Personen zur Verf\u00fcgung gestellt wird. Die Alpha-Version einer Software ist oft noch stark fehlerbehaftet und nur unter gr\u00f6\u00dfter Vorsicht eingesetzt werden.</p>"},{"location":"glossar/#anwendungsklasse","title":"Anwendungsklasse:","text":"<p>Anwendungsklassen dienen zur Kategorisierung von Software und legen dazugeh\u00f6rige Regeln und Empfehlungen in Bezug auf eine angemessene Softwareentwicklungspraxis und Dokumentation fest. Sie erleichtern die Pr\u00fcfung der Regeln und die Kommunikation zu den dazugeh\u00f6rigen Themen. Weitere Informationen zum Begriff k\u00f6nnen dem Dokument \u201eSoftware-Engineering-Empfehlungen des DLR\u201c (ab Seite 7) entnommen werden. Darin befindet sich eine exemplarische Definition von aufeinander aufbauenden Anwendungsklassen. Die beschriebene \u201eAnwendungsklasse 1\u201c legt beispielsweise minimale Empfehlungen f\u00fcr kleine, unkritische Software (z. B. Datenauswertungsskripte) fest und ist kompatibel zur der in diesem Dokument festgelegten Minimalpraxis in Bezug auf Entwicklung und Dokumentation.</p>"},{"location":"glossar/#application-programming-interface-api","title":"Application Programming Interface (API):","text":"<p>Eine API beschreibt eine Schnittstelle, mit der bereitgestellte Funktionalit\u00e4ten aus anderer Software bspw. Bibliotheken von Dritten programmatisch (d.h., \u00fcber den Quellcode)  wiederbenutzt werden kann. Archivierung: Eine Archivierung der am Forschungszentrum J\u00fclich programmierten Software tr\u00e4gt zur Nachhaltigkeit der Softwareentwicklung bei. Dabei dient die Archivierung prim\u00e4r der Sicherung von Versionen zu Nachweis-, Provenienz- und Reproduzierbarkeits-Zwecken im Kontext wissenschaftlicher Ergebnisse. Die Archivierung erfolgt inklusive begleitender Daten (z. B. Metadaten, Dokumentation, ggf. Laufzeitumgebung und Testdaten). Zus\u00e4tzlich muss eine Einhaltung von Speicherfristen entsprechend der Regeln guter wissenschaftlicher Praxis in den Fachdisziplinen eingehalten werden. M\u00f6glichkeiten zur Archivierung k\u00f6nnen je nach Anforderungen und Anwendungsklasse unter anderem sein: Repositorien (Zenodo, J\u00fclich DATA, etc  ), Software-Journale und das Software Heritage Archive. N\u00e4here Informationen dazu finden sich in den Best Practices und auf dem RSE-Portal. Nachhaltige Software setzt voraus, dass auch inaktive oder archivierte Software nachnutzbar bleibt. Die Schnelllebigkeit der Technologien im Software-Umfeld stellt im Hinblick auf die Archivierung von Software eine Herausforderung dar. Software-Entwickler:innen, Projektleiter:innen und F\u00fchrungskr\u00e4fte m\u00fcssen bei der Planung, Umsetzung und Verwertung von selbstprogrammierter Software gemeinsam anhand der Anwendungsklasse entscheiden, wie im konkreten Einzelfall zu handeln ist. Die entsprechenden (langfristigen) Ressourcen daf\u00fcr sind durch die Projektverantwortlichen von Beginn an einzuplanen.</p>"},{"location":"glossar/#automatisierung-fur-software-engineering-prozesse","title":"Automatisierung (f\u00fcr Software Engineering Prozesse):","text":"<p>ToDo</p>"},{"location":"glossar/#ausfuhrbarkeit-von-software","title":"Ausf\u00fchrbarkeit (von Software):","text":"<p>ToDo</p>"},{"location":"glossar/#ausfuhrungseffizienz-von-software","title":"Ausf\u00fchrungseffizienz (von Software)","text":"<p>Eigenschaft von Software bzgl. des Ressourcenverbrauchs (bspw. Speicher, Rechenzeit)</p>"},{"location":"glossar/#best-practices","title":"Best Practices:","text":"<p>ToDo</p>"},{"location":"glossar/#beta-version","title":"Beta-Version:","text":"<p>Die Beta-Version einer Software bezeichnet eine Version, die bereits von weiteren Personen als den Entwicklern selbst getestet wurde. Die Beta-Version enth\u00e4lt oftmals noch Fehler und sollte nur unter gro\u00dfer Vorsicht f\u00fcr Produktionszwecke genutzt werden.</p>"},{"location":"glossar/#betriebssystem","title":"Betriebssystem:","text":"<p>ToDo</p>"},{"location":"glossar/#bibliothek-in-der-softwareentwicklung","title":"Bibliothek (in der Softwareentwicklung):","text":"<p>ToDo</p>"},{"location":"glossar/#binary-von-software","title":"Binary (von Software):","text":"<p>ToDo</p>"},{"location":"glossar/#branch-in-der-versionierung","title":"Branch (in der Versionierung):","text":"<p>Ein Branch beschreibt in einem Versionskontrollsystem einen separaten Entwicklungs- und Versionierungsstrang.</p>"},{"location":"glossar/#bug-in-der-softwareentwicklung","title":"Bug (in der Softwareentwicklung):","text":"<p>Ein Bug beschreibt einen Softwarefehler, welcher sich durch unterschiedliche Symptome bspw. dem Absturz der Software, Performance-Probleme, sicherheitskritischen L\u00fccken bemerkbar machen kann. Siehe auch https://de.wikipedia.org/wiki/Programmfehler </p>"},{"location":"glossar/#bug-fixing-in-der-softwareentwicklung","title":"Bug-Fixing (in der Softwareentwicklung)","text":"<p>Bug-Fixing beschreibt den manuellen oder automatisierten Prozess durch Entwicklende einen Bug so zu beheben, sodass die negativen Symptome nicht mehr bestehen und keine neuen Bugs integriert werden.</p>"},{"location":"glossar/#change-management","title":"Change-Management:","text":"<p>ToDo</p>"},{"location":"glossar/#cloud","title":"Cloud:","text":"<p>ToDo</p>"},{"location":"glossar/#code-analyse","title":"Code Analyse:","text":"<p>ToDo</p>"},{"location":"glossar/#codegenerator","title":"Codegenerator:","text":"<p>ToDo</p>"},{"location":"glossar/#contributor-agreement","title":"Contributor Agreement:","text":"<p>Ein Contributor Agreement oder Contributor License Agreement (CLA), ist ein Dokument, in dem die Bedingungen beschrieben sind, unter denen geistiges Eigentum zu einem Projekt oder Vorhaben beigetragen werden kann; meist handelt es sich um ein Software-Projekt unter einer Open-Source-Lizenz. Das Forschungszentrum J\u00fclich stellt eine gepr\u00fcfte Vorlage \u00fcber das RSE-Portal zur Verf\u00fcgung, welche den externen Beitragenden vorgelegt werden kann Contributor Agreement: Ein Contributor Agreement oder Contributor License Agreement (CLA), ist ein Dokument, in dem die Bedingungen beschrieben sind, unter denen geistiges Eigentum eines Contributors zu einem Projekt oder Vorhaben beigetragen werden kann. Zumeist handelt es sich um ein Software-Projekt- unter einer Open-Source-Lizenz. [[Die Universit\u00e4t | Hochschule | das Forschungszentrum]] stellt eine gepr\u00fcfte Vorlage auf [[der RSE-Webseite]] zur Verf\u00fcgung, welche den externen Beitragenden, zum Beispiel Studierenden, vorgelegt werden sollte.</p>"},{"location":"glossar/#commit-in-der-versionierung","title":"Commit (in der Versionierung):","text":"<p>Der Begriff Commit basiert auf dem Versionskontrollsystem git und beschreibt allgemein das Speichern von \u00c4nderungen von Daten in einem Repository und somit die Erstellung von Softwareversionen. Siehe auch https://de.wikipedia.org/wiki/Commit </p>"},{"location":"glossar/#compiler","title":"Compiler:","text":"<p>Ein Compiler beschreibt ein Programm, das Quellcode von einer h\u00f6heren Programmiersprache in eine maschinenlesbarer(e) Sprache umwandelt. Siehe auch https://de.wikipedia.org/wiki/Compiler </p>"},{"location":"glossar/#continuous-integrationcontinuous-delivery-cicd","title":"Continuous Integration/Continuous Delivery (CI/CD):","text":"<p>CI/CD bezeichnet den kontinuierlichen Einbau von Aenderungen in die Produktionsversion der Software (CI), sowie das automatische Deployment der neuesten Version (CD). Hierdurch werden neueste Entwicklungen und Korrekturen der Software zeitnah an den Nutzer weitergegeben, gleichzeitig aber der Produktionszustand der Software nicht unterbrochen.</p>"},{"location":"glossar/#copyleft","title":"Copyleft:","text":"<p>ToDo</p>"},{"location":"glossar/#cse","title":"CSE:","text":"<p>ToDo</p>"},{"location":"glossar/#datascience","title":"DataScience:","text":"<p>ToDo</p>"},{"location":"glossar/#datensatz","title":"Datensatz:","text":"<p>ToDo</p>"},{"location":"glossar/#datenstruktur","title":"Datenstruktur:","text":"<p>Eine Datenstruktur beschreibt eine konkrete Organisations- und Speicherungsform von Daten als auch m\u00f6gliche Verhaltensweisen auf Basis dieser Struktur. Siehe auch https://de.wikipedia.org/wiki/Datenstruktur </p>"},{"location":"glossar/#de-rse","title":"de-RSE","text":"<p>de-RSE e.V. - Gesellschaft f\u00fcr Forschungssoftware</p>"},{"location":"glossar/#design-pattern","title":"Design Pattern:","text":"<p>ToDo</p>"},{"location":"glossar/#devops","title":"DevOps:","text":"<p>DevOps beschreibt ein Kofferwort aus Development (dt. Softwareentwicklung) und Operations (dt. Softwarebetrieb) und umfasst den Prozess sowie zugeh\u00f6rige Techniken, die die Softwareentwicklung und dessen Betrieb enger mit einander verzahnt, um Anpassungen am Quellcode schneller in die operative Software zu \u00fcberf\u00fchren und \u00c4nderungsbedarfe aus dem Betrieb an die Entwicklung zur\u00fcckzuspielen.</p>"},{"location":"glossar/#dokumentation","title":"Dokumentation:","text":"<p>Eine Software-Dokumentation erkl\u00e4rt Nutzern/Anwendern und Entwicklern, wie die Software installiert, genutzt und modifiziert werden kann, sowie den Anwendungsbereich und Funktionsweise der Software. Eine Dokumentation kann verschiedene Auspr\u00e4gungen annehmen, angefangen von Kommentaren im Code zu umfangreichen Tutorials und Handb\u00fcchern. Es existieren Tools zur automatisierten Erstellung von Dokumentation.</p>"},{"location":"glossar/#dual-licensing-duale-lizenz","title":"Dual Licensing / Duale Lizenz:","text":"<p>Die Software wird z.B. unter einer Copyleft und einer kommerziellen Lizenz ver\u00f6ffentlicht. M\u00f6chte der Nutzer das Copyleft umgehen, muss er eine Lizenz k\u00e4uflich erwerben. Verwandte Konzepte sind Functional Source Licensing und Open Core.</p>"},{"location":"glossar/#editor","title":"Editor:","text":"<p>ToDo</p>"},{"location":"glossar/#effizienz-der-softwareerstellung","title":"Effizienz (der Softwareerstellung)","text":"<p>Eigenschaft der Softwareerstellung bezogen auf die inkludierten Prozesse bzw. beteiligten Personen im Sinne von Ressourcenverbrauch (bspw. Arbeitszeit)</p>"},{"location":"glossar/#entwicklungsprozess","title":"Entwicklungsprozess:","text":"<p>ToDo</p>"},{"location":"glossar/#entwicklungsteam","title":"Entwicklungsteam:","text":"<p>ToDo Evolution / Evolution\u00e4re Weiterentwicklung ist die Sammlung aller Aktivit\u00e4ten zur Modifikation von Software in Form einer Gemeinschaftsleistung um neue Funktionen, Algorithmen, Modelle, Daten und andere Formen von ausf\u00fchrbaren Wissen hinzuzuf\u00fcgen, die Ausf\u00fchrungseffizienz zu optimieren, die Nutzungsoptionen zu verallgemeinern, oder vorhandene Fehler zu beheben. Evolution\u00e4re Weiterentwicklung ist zeitlich aufw\u00e4ndig und bedarf anderer methodischer Vorgehensweisen wie die initiale Erstellung. Exportkontrolle: Sobald Personen aus Staaten au\u00dferhalb der EU oder gleichgestellten Staaten (UK, USA, JP,\u2026) am Projekt beteiligt sein sollen, kann eine au\u00dfenwirtschaftsrechtliche Pr\u00fcfung des Projekts erforderlich sein. Ob dies f\u00fcr das eigene Projekt notwendig ist, kann [[in Absprache mit Abteilung \u2026 | anhand einer Checkliste auf der RSE-Webseite]] ermittelt werden. FAIR-Prinzipien (Findable, Accessible, Interoperable, Reusable) wurden zuerst f\u00fcr Forschungsdaten entwickelt und sp\u00e4ter f\u00fcr andere Forschungsergebnisse wie Software neu gefasst. Die FAIR Prinzipien f\u00fcr Forschungssoftware sollen sowohl f\u00fcr die Software als auch f\u00fcr ihre Metadaten wie Dokumentation gelten.</p>"},{"location":"glossar/#fair","title":"FAIR","text":"<p>Findable, Accessible, Interoperable, Reusable </p>"},{"location":"glossar/#feature","title":"Feature:","text":"<p>ToDo</p>"},{"location":"glossar/#firmware","title":"Firmware:","text":"<p>ToDo</p>"},{"location":"glossar/#framework","title":"Framework:","text":"<p>ToDo</p>"},{"location":"glossar/#forschungsdatenmanagement-fdm","title":"Forschungsdatenmanagement (FDM):","text":"<p>FDM beinhaltet die Datenaquisition, Transformation, Dokumentation, und Bereitstellung sowie Archivierung von Daten. Ziel von FDM ist es, Daten m\u00f6glichst umfassend nachnutzbar und reproduzierbar zu halten.</p>"},{"location":"glossar/#forschungssoftware","title":"Forschungssoftware:","text":"<p>sind alle Formen von Quellcode, Beschreibungen, Dokumentation, ausf\u00fchrbaren Modellen, Konfigurationsdateien, darin eingebettete Datens\u00e4tze, Scripte und daraus generierte ausf\u00fchrbare Programme, die im Rahmen der Forschung und f\u00fcr Forschungszwecke entwickelt werden.</p>"},{"location":"glossar/#forschungstransfer","title":"Forschungstransfer:","text":"<p>ToDo</p>"},{"location":"glossar/#forschungsvorhaben","title":"Forschungsvorhaben:","text":"<p>ToDo</p>"},{"location":"glossar/#functional-source-licensing","title":"Functional Source Licensing","text":"<p>Einen Schutz eigener wirtschaftlicher Interessen trotz Open Source Lizenz kann die Functional Source License bieten.</p>"},{"location":"glossar/#gi","title":"GI","text":"<p>Gesellschaft f\u00fcr Informatik e.V. </p>"},{"location":"glossar/#git","title":"Git:","text":"<p>Git ist ein Versionskontrollsystem, mit dem man verfolgen kann, wer wann welche \u00c4nderungen am Code vorgenommen hat. Git bietet Optionen zur einfachen Aktualisierung einer freigegebenen oder \u00f6ffentlichen Version eines Codes auf GitHub.</p>"},{"location":"glossar/#graphical-user-interface-gui","title":"Graphical User Interface (GUI):","text":"<p>grafische Nutzerschnittstelle, vgl. User Interface</p>"},{"location":"glossar/#hardware","title":"Hardware:","text":"<p>ToDo</p>"},{"location":"glossar/#hpc","title":"HPC:","text":"<p>High-Performance Computing (dt. Hochleistungsrechnen) ToDo</p>"},{"location":"glossar/#integrationstest","title":"Integrationstest:","text":"<p>ToDo</p>"},{"location":"glossar/#invesititionsschutz","title":"Invesititionsschutz:","text":"<p>ToDo</p>"},{"location":"glossar/#klasse-im-quellcode","title":"Klasse (im Quellcode):","text":"<p>Eine Klasse beschreibt ein Konzept aus der objektorientierten Programmierung, in der in Form von Quellcode die generelle Struktur und das Verhalten von Objekten beschrieben wird. Siehe auch hier</p>"},{"location":"glossar/#konfiguration","title":"Konfiguration:","text":"<p>ToDo</p>"},{"location":"glossar/#lizenz-eine-lizenz-ist-eine-formelle-erlaubnis-oder-ein-recht-zur-nutzung-von-urheberrechtlich-geschutzten-werken-software-patenten-marken-oder-anderen-formen-des-geistigen-eigentums-unter-bestimmten-bedingungen-die-einer-person-oder-organisation-gewahrt-werden","title":"Lizenz: Eine Lizenz ist eine formelle Erlaubnis oder ein Recht zur Nutzung von urheberrechtlich gesch\u00fctzten Werken, Software, Patenten, Marken oder anderen Formen des geistigen Eigentums unter bestimmten Bedingungen, die einer Person oder Organisation gew\u00e4hrt werden.","text":""},{"location":"glossar/#lizenzierung","title":"Lizenzierung:","text":"<p>ToDo</p>"},{"location":"glossar/#merge-in-der-versionierung","title":"Merge (in der Versionierung):","text":"<p>Ein Merge beschreibt in einem Versionskontrollsystem die Zusammenf\u00fchrung von Branches bspw. um einen Entwicklungszweig f\u00fcr ein Softwarefeature in den Hauptentwicklungszweig zur\u00fcckzuspielen.</p>"},{"location":"glossar/#methode-im-quellcode","title":"Methode (im Quellcode):","text":"<p>Eine Methode beschreibt ein typischerweise gekapseltes Verhalten, das in Form von Quellcode beschrieben wird und dessen Verhalten sowohl auf Eingabedaten als auch auf Basis des Programm- und/oder Entwicklungsumgebungszustandes Ausgabewerte oder konkrete Verhaltensweisen erzeugen kann. Siehe auch hier</p>"},{"location":"glossar/#modularisierung-von-software","title":"Modularisierung (von Software):","text":"<p>ToDo</p>"},{"location":"glossar/#nachhaltige-softwareentwicklung","title":"Nachhaltige Software(entwicklung):","text":"<p>ToDo</p>"},{"location":"glossar/#nachnutzung","title":"Nachnutzung:","text":"<p>ToDo</p>"},{"location":"glossar/#nutzungs-und-verwertungsrecht","title":"Nutzungs- und Verwertungsrecht:","text":"<p>Sobald Software-Entwickler:innen sich in einem Arbeits- und Dienstverh\u00e4ltnis mit [[der Universit\u00e4t | Hochschule | dem Forschungszentrum]] befinden, liegen die Nutzungs- und Verwertungsrechte gem\u00e4\u00df Urheberrecht automatisch [[der Universit\u00e4t | Hochschule | dem Forschungszentrum]]. Spezielle Regelungen sind daher bei der geplanten Einbeziehung Dritter, die keinen Arbeitsvertrag o. \u00c4. mit dem Forschungszentrum haben, vor Projektstart zu treffen. Externe Beitr\u00e4ge k\u00f6nnen bei Bedarf \u00fcber ein Contributor License Agreement eingebunden werden. Eine gepr\u00fcfte Vorlage steht dazu zur Verf\u00fcgung. Projektantr\u00e4ge und Konsortialvertr\u00e4ge beschreiben den Umgang mit Nutzungs- und Verwertungsrechten.</p>"},{"location":"glossar/#nutzungs-und-verwertungsrecht_1","title":"Nutzungs- und Verwertungsrecht:","text":"<p>Sobald Software-Entwickler:innen sich in einem Arbeits- und Dienstverh\u00e4ltnis mit dem Forschungszentrum J\u00fclich befinden, liegen die Nutzungs- und Verwertungsrechte gem\u00e4\u00df Urheberrecht automatisch beim Forschungszentrum. Spezielle Regelungen sind daher bei der geplanten Einbeziehung Dritter, die keinen Arbeitsvertrag o. \u00c4. mit dem Forschungszentrum haben, vor Projektstart zu treffen. Externe Beitr\u00e4ge k\u00f6nnen bei Bedarf \u00fcber ein Contributor License Agreement eingebunden werden. Das Forschungszentrum J\u00fclich stellt eine gepr\u00fcfte Vorlage \u00fcber die RSE-Portal zur Verf\u00fcgung, welche den externen Beitragenden vorgelegt werden kann.</p>"},{"location":"glossar/#open-core","title":"Open Core","text":"<p>Eine bzgl. des Funktionsumfangs reduzierte Version der Software wird unter einer Open Source Lizenz ver\u00f6ffentlicht. Die Gesamtsoftware wird unter einer proprit\u00e4ren Lizenz ver\u00f6ffentlicht.</p>"},{"location":"glossar/#open-science","title":"Open Science:","text":"<p>ToDo</p>"},{"location":"glossar/#open-source","title":"Open Source:","text":"<p>ToDo</p>"},{"location":"glossar/#oss-lizenzen","title":"OSS- Lizenzen:","text":"<p>Nach allgemeiner Ansicht gibt die Open Source Definition (http://www.opensource.org/docs/osd) korrekt wieder, was in der Open Source Community unter dem Begriff \"Open Source Software\" verstanden wird. Entscheidendes Kriterium der Definition ist, dass die Lizenz einer Software die umfassende \"freie\" Nutzung des Programms gestattet und keine Beschr\u00e4nkung der Lizenznehmer oder Verwendungsgebiete vorsieht, also von jedermann zu jedem Zweck genutzt werden darf. Die Lizenzgeb\u00fchrenfreiheit und der offen zug\u00e4ngliche Sourcecode sind dabei wesentliche Voraussetzungen f\u00fcr die freie Nutzbarkeit. Entscheidend ist also stets der Lizenzvertrag, unter dem eine Software angeboten wird. Open-Source-Lizenz / OSS-Lizenz: Nach allgemeiner Ansicht gibt die Open Source Definition (http://www.opensource.org/docs/osd) korrekt wieder, was in der Open Source Community unter dem Begriff \"Open Source Software\" verstanden wird. Entscheidendes Kriterium der Definition ist, dass die Lizenz einer Software die umfassende \"freie\" Nutzung des Programms gestattet und keine Beschr\u00e4nkung der Lizenznehmer oder Verwendungsgebiete vorsieht, also von jedermann zu jedem Zweck genutzt werden darf. Die Lizenzgeb\u00fchrenfreiheit und der offen zug\u00e4ngliche Sourcecode sind dabei wesentliche Voraussetzungen f\u00fcr die freie Nutzbarkeit. Entscheidend ist also stets der Lizenzvertrag, unter dem eine Software angeboten wird. -- Es gibt deutliche Unterschiede in den verf\u00fcgbaren Freiheiten.</p>"},{"location":"glossar/#permissive-lizenz","title":"Permissive Lizenz:","text":"<p>ToDo</p>"},{"location":"glossar/#plugin","title":"Plugin:","text":"<p>ToDo</p>"},{"location":"glossar/#privacy-dt-datenschutz","title":"Privacy (dt. Datenschutz):","text":"<p>ToDo</p>"},{"location":"glossar/#product-owner","title":"Product Owner:","text":"<p>ToDo</p>"},{"location":"glossar/#programmierung","title":"Programmierung:","text":"<p>ToDo</p>"},{"location":"glossar/#programmiersprache","title":"Programmiersprache:","text":"<p>Eine Programmiersprache beschreibt eine formale Sprache zur Beschreibung von Algorithmen und Datenstrukturen in Form von Quellcode. Siehe auch hier.</p>"},{"location":"glossar/#prototyp","title":"Prototyp:","text":"<p>ToDo</p>"},{"location":"glossar/#proof-of-concept","title":"Proof-of-concept:","text":"<p>ToDo</p>"},{"location":"glossar/#proprietare-lizenzen","title":"Propriet\u00e4re Lizenzen:","text":"<p>Der wesentliche Unterschied zwischen propriet\u00e4ren und Open Source Lizenzen ist, dass die propriet\u00e4re Lizenz v\u00f6llig frei gestaltet werden kann und insbesondere die M\u00f6glichkeit er\u00f6ffnet, die Weitergabe von Code vollst\u00e4ndig einzuschr\u00e4nken. Zwar verpflichtet die Verwendung einer Open Source Lizenz nicht pauschal zur Weitergabe, allerdings kann einem Dritten gegen\u00fcber dieses Recht nicht eingeschr\u00e4nkt werden. Ferner greift die Open Source Lizenz nur dann, wenn der Dritte die Software wieder weitergibt. So w\u00e4re z.B. das Anbieten einer Dienstleistung mit der Software ohne Weitergabe dieser ohne weiteres m\u00f6glich. Eine propriet\u00e4re Lizenz wird also dann interessant, wenn man die Weitergabe des Codes an sich oder eine bestimmte Art der Verwendung (kommerzielle Nutzung) einschr\u00e4nken m\u00f6chte.</p>"},{"location":"glossar/#proprietare-lizenz","title":"Propriet\u00e4re Lizenz:","text":"<p>Eine propriet\u00e4re Lizenz ist eine Art von Softwarelizenz, die das Recht zur Nutzung, Modifikation und Weiterverteilung der Software einschr\u00e4nkt. W\u00e4hrend Open Source Lizenzen wiederverwendet werden k\u00f6nnen und dadurch ein gewisses Ma\u00df an Standardisierung und Kompatibilit\u00e4t erm\u00f6glichen, werden sind propriet\u00e4re Lizenz v\u00f6llig frei zu gestalten. Eine propriet\u00e4re Lizenz wird meist dann interessant, wenn man die Weitergabe des Codes an sich oder eine bestimmte Art der Verwendung (kommerzielle Nutzung) einzuschr\u00e4nken ist.</p>"},{"location":"glossar/#qualitatssicherung","title":"Qualit\u00e4tssicherung:","text":"<p>ToDo</p>"},{"location":"glossar/#quellcode","title":"Quellcode:","text":"<p>Als Quellcode bezeichnet man die strukturierte, textuelle Beschreibung von Algorithmen und Funktionalit\u00e4ten einer Software in Form von Programmier- oder Skriptsprachen, welche automatisiert in ein ausf\u00fchrbares Programm \u00fcberf\u00fchrt werden k\u00f6nnen.</p>"},{"location":"glossar/#refactoring","title":"Refactoring:","text":"<p>ToDo</p>"},{"location":"glossar/#release","title":"Release","text":"<p>Bei einem Release handelt es sich um eine Version einer Software, die Nutzern zur Verf\u00fcgung gestellt wird oder einen Beitrag zu einer wissenschaftlichen Publikation leistet. Einem Schema folgend, stellt eine Release-Nummer sicher, dass Release und damit verbundener Inhalt eindeutig gekennzeichnet sind.</p>"},{"location":"glossar/#reproduzierbarkeit","title":"Reproduzierbarkeit:","text":"<p>ToDo</p>"},{"location":"glossar/#repository","title":"Repository:","text":"<p>Ein Repository ist ein zentraler Speicherort, in dem Daten gespeichert und verwaltet werden. In der Softwareentwicklung bezieht es sich typischerweise auf einen Speicherort, in dem Code, Dokumentation und andere Projektdateien in einer strukturierten Form gehalten werden. Repositories erm\u00f6glichen es Entwickler:innen, \u00c4nderungen am Code nachzuverfolgen, die Zusammenarbeit zu erleichtern und verschiedene Versionen und Varianten eines Projekts zu verwalten. Popul\u00e4re Repositories wie GitHub und GitLab bieten neben der zentralen Speicherverwaltung viele weitere Services, wie die Ticketverwaltung, Continuous-Integration, Automatische \u00dcberpr\u00fcfung von Codequalit\u00e4t, die Detektion von Security-Problemen, und vieles mehr. Ein Repository kann auch als Archiv oder zur Software-Ver\u00f6ffentlichung eingesetzt werden.</p>"},{"location":"glossar/#code-repository","title":"(Code-)Repository:","text":"<p>Ein (Code-)Repository ist ein Archiv f\u00fcr den Code, an dem gearbeitet wird. Neben dem Code selbst k\u00f6nnen Sie in Ihrem Repository auch Dinge wie Dokumentation, Notizen, Webseiten und andere Dinge aufbewahren. Ein Code-Repository ist f\u00fcr jedes erfolgreiche Softwareentwicklungsprojekt erforderlich.</p>"},{"location":"glossar/#requirements-engineering-re","title":"Requirements Engineering (RE):","text":"<p>ToDo</p>"},{"location":"glossar/#research-software-engineering-rse","title":"Research Software Engineering (RSE):","text":"<p>adressiert die Anwendung von Methoden, Techniken und Best Practices des Software Engineering bei der Entwicklung von Forschungssoftware.  (Definition nach Wikipedia)</p>"},{"location":"glossar/#research-software-engineers-rses","title":"Research Software Engineer(s) (RSEs):","text":""},{"location":"glossar/#research-software-engineers","title":"Research Software Engineer(s)","text":"<p>hier ToDo: Kurzdefinition geben und nicht nur eine Verlinkung geben</p>"},{"location":"glossar/#review-von-quellcode","title":"Review (von Quellcode):","text":"<p>Ein Review bzw. Code-Review beschreibt einen typischerweise manuellen Prozess zur Qualit\u00e4tssicherung von Software, bei der \u00c4nderungen von einem Entwickelnden an der Software durch m\u00f6glichst unabh\u00e4ngige andere Entwickelnde bzgl. definierter Qualit\u00e4tskriterien gelesen, bewertet und kommentiert werden. In einem dialog\u00e4hnlichen Kommentierungs- und \u00c4nderungsprozess zwischen Entwickelnden und Reviewer werden eventuelle Qualit\u00e4tsm\u00e4ngel der \u00c4nderung dann ausgeglichen.</p>"},{"location":"glossar/#schnittstelle-in-der-software-engl-interface","title":"Schnittstelle (in der Software, engl. Interface):","text":"<p>Eine Schnittstelle in der Software beschreibt den Teil der Software, der f\u00fcr die Kommunikation mit anderen Softwarekomponenten (bspw. Application Programming Interfaces) oder den Nutzenden der Software (bspw. User Interfaces) zust\u00e4ndig ist.</p>"},{"location":"glossar/#scrum","title":"Scrum:","text":"<p>ToDo</p>"},{"location":"glossar/#security-dt-informationssicherheit","title":"Security (dt. Informationssicherheit):","text":"<p>Die Stabsstelle Datenschutz und Informationssicherheit stellt in der \u201eRichtlinie Informationssicherheit\u201c (in Erstellung) ein Klassifikationssystem f\u00fcr das Schutzniveau von Daten bereit. Bei der Erstellung von Software wird daher empfohlen, sich bereits fr\u00fchzeitig Gedanken \u00fcber die Einstufung der eingeflossenen Daten und der Software an sich anhand der Richtlinie zu machen. Sp\u00e4testens bei Vorliegen von substantiellen Code-Teilen muss eine Klassifikation vorliegen.</p>"},{"location":"glossar/#server","title":"Server:","text":"<p>ToDo</p>"},{"location":"glossar/#sprint","title":"Sprint:","text":"<p>ToDo</p>"},{"location":"glossar/#skript","title":"Skript:","text":"<p>ToDo</p>"},{"location":"glossar/#software","title":"Software:","text":"<p>Mit Software sind im Kontext dieser Leitlinie alle Formen von Programmcode (z. B. Quellcode nebst zugeh\u00f6rigen Dokumentationen, Parametern und Workflows) und daraus generierten ausf\u00fchrbaren Programmen gemeint, die im Rahmen einer wissenschaftsbezogenen T\u00e4tigkeit an [[Einrichtung]] entwickelt und / oder (nach)genutzt werden.</p>"},{"location":"glossar/#software-abnahme","title":"(Software-) Abnahme:","text":"<p>ToDo</p>"},{"location":"glossar/#software-anforderung","title":"(Software-) Anforderung:","text":"<p>ToDo</p>"},{"location":"glossar/#softwarearchitekt","title":"Softwarearchitekt:","text":"<p>ToDo</p>"},{"location":"glossar/#software-architektur","title":"(Software-) Architektur:","text":"<p>ToDo</p>"},{"location":"glossar/#software-architekturmuster","title":"(Software-) Architekturmuster:","text":"<p>ToDo</p>"},{"location":"glossar/#software-bereitstellung","title":"(Software-) Bereitstellung:","text":"<p>ToDo</p>"},{"location":"glossar/#software-configuration-management","title":"(Software-) Configuration Management:","text":"<p>ToDo</p>"},{"location":"glossar/#software-container","title":"(Software-) Container:","text":"<p>ToDo</p>"},{"location":"glossar/#software-construction","title":"(Software-) Construction:","text":"<p>ToDo</p>"},{"location":"glossar/#software-derivat","title":"(Software-) Derivat:","text":"<p>ToDo</p>"},{"location":"glossar/#software-design","title":"(Software-) Design:","text":"<p>ToDo</p>"},{"location":"glossar/#software-discovery","title":"Software Discovery:","text":"<p>ToDo</p>"},{"location":"glossar/#software-dissemination","title":"(Software-) Dissemination:","text":"<p>ToDo</p>"},{"location":"glossar/#software-entwurf","title":"(Software-) Entwurf:","text":"<p>ToDo</p>"},{"location":"glossar/#software-engineering-se","title":"Software Engineering (SE):","text":"<p>ToDo</p>"},{"location":"glossar/#software-engineering-economics","title":"Software Engineering Economics:","text":"<p>ToDo</p>"},{"location":"glossar/#software-engineering-management","title":"Software Engineering Management:","text":"<p>ToDo</p>"},{"location":"glossar/#software-engineering-models-and-methods","title":"Software Engineering Models and Methods:","text":"<p>ToDo</p>"},{"location":"glossar/#software-engineering-process","title":"Software Engineering Process:","text":"<p>ToDo</p>"},{"location":"glossar/#software-engineering-professional-practice","title":"Software Engineering Professional Practice:","text":"<p>ToDo</p>"},{"location":"glossar/#softwareentwicklung","title":"Softwareentwicklung:","text":"<p>ToDo</p>"},{"location":"glossar/#softwarekomponente","title":"Softwarekomponente:","text":"<p>ToDo</p>"},{"location":"glossar/#software-lebenszyklus","title":"(Software-) Lebenszyklus:","text":"<p>Der Lebenszyklus einer Software beschreibt alle wesentlichen Entwicklungsstadien, ausgehend von der Idee und Konzeption, dem Design, \u00fcber die Entwicklung, Abnahme, Nutzung und Pflege bis hin zur Archivierung und Au\u00dferbetriebnahme.</p>"},{"location":"glossar/#software-maintenance","title":"(Software-) Maintenance:","text":"<p>siehe (Software-) Pflege</p>"},{"location":"glossar/#softwaremanagement-plan-smp","title":"Softwaremanagement-Plan (SMP):","text":"<p>ToDo</p>"},{"location":"glossar/#software-modell","title":"(Software-) Modell:","text":"<p>ToDo</p>"},{"location":"glossar/#software-modellierungssprache","title":"(Software-) Modellierungssprache:","text":"<p>ToDo</p>"},{"location":"glossar/#software-paket","title":"(Software-) Paket:","text":"<p>ToDo</p>"},{"location":"glossar/#software-pflege","title":"(Software-) Pflege:","text":"<p>ToDo</p>"},{"location":"glossar/#softwareprojekt","title":"Softwareprojekt:","text":"<p>Ein Softwareprojekt ist ein komplexes Unterfangen, zumeist von mehreren Personen, das im Rahmen von Zeit, Budget und Personalressourcen einen neuen oder verbesserte Software hervorbringt.</p>"},{"location":"glossar/#software-projekt","title":"(Software-) Projekt:","text":"<p>Ein Softwareprojekt ist ein komplexes Unterfangen von zwei oder mehr Personen, das im Rahmen von Zeit, Budget und Personalressourcen einen neuen oder verbesserten Computercode hervorbringt.</p>"},{"location":"glossar/#software-publikation","title":"(Software-) Publikation:","text":"<p>Analog zu Forschungsdaten und wissenschaftlichen Texten ist auch Software ein Ergebnis wissenschaftlicher Arbeit, sodass sie als wissenschaftliche Publikation einem breiten Publikum bekannt gemacht werden kann. Nichtsdestotrotz kann der Zugang zur Software aus der Publikation analog zu Forschungsdaten eingeschr\u00e4nkt sein. Wie Forschungsdaten und Textpublikationen beinhaltet eine Software-Publikation Metadaten, mit denen sie auffindbar und zitierbar ist. Anders als Forschungsdaten ist Software aber auch ein lebendes, regelm\u00e4\u00dfig weiterentwickeltes Objekt, weshalb die Metadaten die jeweils konkreten Versionen jeder verwendeten Komponente, die genutzten externen Komponenten, deren jeweilige Lizenz-Bedingungen und einen Hinweis auf potentielle neuere Versionen beinhaltet.</p>"},{"location":"glossar/#software-publikation_1","title":"(Software-) Publikation:","text":"<p>Analog zu Forschungsdaten und wissenschaftlichen Texten ist auch Software ein Ergebnis wissenschaftlicher Arbeit, sodass sie als wissenschaftliche Publikation einem breiten Publikum bekannt gemacht werden kann. Nichtsdestotrotz kann der Zugang zur Software aus der Publikation analog zu Forschungsdaten eingeschr\u00e4nkt sein. Wie Forschungsdaten und Textpublikationen beinhaltet eine Software-Publikation Metadaten, mit denen sie auffindbar und zitierbar ist.</p>"},{"location":"glossar/#software-qualitat","title":"Software Qualit\u00e4t:","text":"<p>ToDo</p>"},{"location":"glossar/#software-stack","title":"Software-Stack:","text":"<p>ToDo</p>"},{"location":"glossar/#software-support","title":"(Software-) Support:","text":"<p>ToDo</p>"},{"location":"glossar/#softwaresystem","title":"Softwaresystem:","text":"<p>ToDo</p>"},{"location":"glossar/#softwaretechnik","title":"Softwaretechnik:","text":"<p>siehe Software Engineering</p>"},{"location":"glossar/#software-variabilitat","title":"(Software-) Variabilit\u00e4t:","text":"<p>ToDo</p>"},{"location":"glossar/#software-variante","title":"(Software-) Variante:","text":"<p>ToDo</p>"},{"location":"glossar/#software-verwaltung","title":"(Software-) Verwaltung:","text":"<p>ToDo</p>"},{"location":"glossar/#software-wartung","title":"(Software-) Wartung:","text":"<p>ToDo</p>"},{"location":"glossar/#software-weitergabe","title":"(Software-) Weitergabe:","text":"<p>ToDo</p>"},{"location":"glossar/#source-von-software","title":"Source (von Software):","text":"<p>siehe Quellcode</p>"},{"location":"glossar/#sprint-master","title":"Sprint Master:","text":"<p>ToDo</p>"},{"location":"glossar/#stakeholder","title":"Stakeholder:","text":"<p>Als Stakeholder werden alle Personen und Organisationen bezeichnet, die eine Software nutzen, finanzieren, entwickeln oder anderweitig Interesse an der Software und ihrer Nutzung haben. </p>"},{"location":"glossar/#standardsaktueller-stand-der-technik","title":"Standards/aktueller Stand der Technik:","text":"<p>Bei dem Begriff \u201eStand der Technik\u201c handelt es sich um einen rechtlich-technischen Begriff, welcher f\u00fcr das Produkt gewisse Mindestanforderungen impliziert. Konkret hei\u00dft es: Stand der Technik ist der Entwicklungsstand fortschrittlicher Verfahren, Einrichtungen und Betriebsweisen, der nach herrschender Auffassung f\u00fchrender Fachleute das Erreichen des gesetzlich vorgegebenen Zieles gesichert erscheinen l\u00e4sst. Verfahren, Einrichtungen und Betriebsweisen oder vergleichbare Verfahren, Einrichtungen und Betriebsweisen m\u00fcssen sich in der Praxis bew\u00e4hrt haben oder sollten \u2013 wenn dies noch nicht der Fall ist \u2013 m\u00f6glichst im Betrieb mit Erfolg erprobt worden sein. Deutlicher wird es, wenn man die Position des Begriffs im Vergleich zu \u201eallgemein anerkannte Regeln der Technik\u201c (darunter) und Stand von Wissenschaft und Technik (dar\u00fcber) sieht. (https://www.bmjv.de/DE/Themen/RechtssetzungBuerokratieabbau/HDR/HDR_node.html; siehe 4.5.1.) Grunds\u00e4tzlich gibt es also zwei M\u00f6glichkeiten. Entweder man definiert eigene m\u00f6glichst konkrete Kriterien, oder man entscheidet sich f\u00fcr einen der drei Begriffe und achtet auf die korrekte Verwendung innerhalb des Projekts.</p>"},{"location":"glossar/#systemtest","title":"Systemtest:","text":"<p>ToDo</p>"},{"location":"glossar/#technical-dept-dt-technische-schulden","title":"Technical Dept (dt. technische Schulden):","text":"<p>ToDo</p>"},{"location":"glossar/#technical-readiness-level-trl","title":"Technical Readiness Level (TRL):","text":"<p>ToDo</p>"},{"location":"glossar/#test","title":"Test:","text":"<p>ToDo</p>"},{"location":"glossar/#testbeschreibung","title":"Testbeschreibung:","text":"<p>ToDo</p>"},{"location":"glossar/#test-driven-development-tdd","title":"Test-Driven Development (TDD):","text":"<p>ToDo</p>"},{"location":"glossar/#ticket","title":"Ticket:","text":"<p>ToDo</p>"},{"location":"glossar/#tivoisierung","title":"Tivoisierung:","text":"<p>ToDo</p>"},{"location":"glossar/#tool-dt-werkzeug","title":"Tool (dt. Werkzeug):","text":"<p>ToDo</p>"},{"location":"glossar/#training-on-the-job","title":"Training-on-the-Job:","text":"<p>ToDo</p>"},{"location":"glossar/#user-interface-ui","title":"User Interface (UI):","text":"<p>Ein User Interface (dt. Nutzerschnittstelle) in einer Software beschreibt eine Schnittstelle zu den Nutzenden dieser Software, um die Funktionalit\u00e4t jener Software verwenden k\u00f6nnen.</p>"},{"location":"glossar/#unit-test","title":"Unit-Test:","text":"<p>ToDo</p>"},{"location":"glossar/#unterstutzungsleistung","title":"Unterst\u00fctzungsleistung:","text":"<p>ToDo</p>"},{"location":"glossar/#urheberrecht","title":"Urheberrecht:","text":"<p>Software unterliegt dem Urheberrecht. \u00a7 69a Urhebergesetz (UrhG) sch\u00fctzt Software in jeder Gestaltung, einschlie\u00dflich Entwurfsmaterial, in allen Ausdrucksformen (QC, C, EXE, Module). Nicht gesch\u00fctzt sind dagegen Ideen und Grunds\u00e4tze, die dem Werk zugrunde liegen. Das Urheberpers\u00f6nlichkeitsrecht ist nach deutschem Recht zwar nicht \u00fcbertragbar, zul\u00e4ssig sind jedoch die Einr\u00e4umung von umf\u00e4nglichen Nutzungsrechten sowie Vereinbarungen zu Verwertungsrechten. Legt man z.B. amerikanisches Recht zugrunde, dann ist auch eine Abtretung des gesamten Urheberrechts m\u00f6glich. Sobald die Software-Entwickler:innen sich in einem Arbeits- und Dienstverh\u00e4ltnis mit dem Forschungszentrum J\u00fclich befinden, liegen die Nutzungs- und Verwertungsrechte automatisch beim Forschungszentrum (Einzelheiten sind im \u00a7 69 b UrhG-Gesetz geregelt). Spezielle Regelungen sind daher bei der geplanten Einbeziehung Dritter, die keinen Arbeitsvertrag o. \u00c4. mit dem Forschungszentrum haben), vor Projektstart beispielsweise bei Ausgr\u00fcndungen oder wirtschaftlicher Nutzung zu treffen.</p>"},{"location":"glossar/#user-dt-nutzende","title":"User (dt. Nutzende):","text":"<p>ToDo</p>"},{"location":"glossar/#variantenmangament","title":"Variantenmangament:","text":"<p>ToDo</p>"},{"location":"glossar/#verifizierbarkeit","title":"Verifizierbarkeit:","text":"<p>ToDo</p>"},{"location":"glossar/#version","title":"Version:","text":"<p>ToDo</p>"},{"location":"glossar/#versionierung","title":"Versionierung:","text":"<p>ToDo</p>"},{"location":"glossar/#versions-historie","title":"Versions-Historie:","text":"<p>ToDo</p>"},{"location":"glossar/#versionskontrollsystem","title":"Versionskontrollsystem:","text":"<p>Wichtig bei der Entwicklung von qualitativ hochwertiger Software ist die Verwendung von Versionskontrollsystemen, um so u.a. eine \u00dcbersicht \u00fcber s\u00e4mtliche \u00c4nderungen am Code und den daran beteiligten Software-Entwicklern:innen zu erhalten. Diese sollen mit kollaborativen Funktionen f\u00fcr Projekte und Communities verkn\u00fcpft sein. Das Versionskontrollsystem dient zur Erfassung von \u00c4nderungen an Daten (z. B. Dokumente, Programmcode) durch eine definierte Personengruppe, die in einem gemeinsamen Speicherort (\u201eRepositorium\u201c) verwaltet werden. Dabei wird jede \u00c4nderung mit einem Zeitstempel und dem Urheber der \u00c4nderung gespeichert. Die sich daraus ergebende Historie erlaubt es, \u00c4nderungen nachzuvollziehen und zu fr\u00fcheren St\u00e4nden zur\u00fcckzukehren. Das Forschungszentrum J\u00fclich bietet aktuell eine solche kollaborative Plattform f\u00fcr seine Mitarbeiter:innen (z.B. aktuell JuGIT, Stand 2021). Dar\u00fcber hinaus ist w\u00fcnschenswert, dass diese Plattform f\u00fcr die nationale und internationale Zusammenarbeit genutzt werden kann, indem etablierte Identit\u00e4tsf\u00f6derationen wie derzeit (2021) eduGain, DFN AAI und/oder die Helmholtz AAI angebunden und \u00fcber diese auch f\u00fcr Nichtbetriebsangeh\u00f6rige in diesem Sinne nutzbar ist. Ebenso k\u00f6nnen weitere solcher Plattformen f\u00fcr geschlossene Gruppen oder aus anderen wichtigen Gr\u00fcnden angeboten werden. Die von der Helmholtz Gemeinschaft im Rahmen von HIFIS bereitstehenden oder etablierte globale Plattformen wie GitHub.com oder GitLab.com stehen ebenfalls zur Auswahl. Diese k\u00f6nnen nach gemeinsamen Ermessen der Entwickler:innen, F\u00fchrungskr\u00e4fte und Projektverantwortlichen genutzt werden, um beispielsweise die Reichweite und Sichtbarkeit zu erh\u00f6hen.</p>"},{"location":"glossar/#weiterentwicklung-siehe-evolutionare-weiterentwicklung","title":"Weiterentwicklung: siehe evolution\u00e4re Weiterentwicklung.","text":""},{"location":"glossar/#wiki","title":"Wiki:","text":"<p>Eingef\u00fchrt von Softwareentwicklern zur schnellen kollaborativen Speicherung von Informationen w\u00e4hrend eines Entwicklungsprojektes.</p>"}]}